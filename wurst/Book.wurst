package Book

/*
    Creates a system of Books and Pages for displaying framehandles. If a Page has reached it's limit,
    a new Page is created to hold the new framehandles. All Page are designed to be held within Books.
*/

import initlater TransportNetwork


let pageHash = new HashMap<int, Page>

public class Book

    HashMap<int, Page> pages
    int numberOfPages
    int maxItemsPerPage
    Page firstPage
    Page lastPage

    construct(int pageSize)
        this.pages = new HashMap<int, Page>
        this.maxItemsPerPage = pageSize
        this.numberOfPages = 0
        this.firstPage = null
        this.lastPage = null

    ondestroy
        destroy pages

    function addPage(Page page)
        this.numberOfPages++
        page.number = this.numberOfPages
        this.pages.put(this.numberOfPages, page)
        this.firstPage = this.pages.get(1)
        this.lastPage = this.pages.get(this.numberOfPages)

    /** this will not automatically refactor the list to remove blank spaces. Only remove last pages.*/
    function removePage(Page page)
        this.pages.remove(page.number)
        this.numberOfPages--
        if this.numberOfPages < 1
            this.firstPage = null
            this.lastPage = null
        else
            this.lastPage = this.pages.get(this.numberOfPages)

    function getPage(int pageNumber) returns Page
        return this.pages.get(pageNumber)

    function addPassenger(Passenger passenger)
        this.lastPage.addItem(passenger)

    function removePassenger(Passenger passenger) returns int
        return passenger.page.removeItem(passenger)

    function isEmpty() returns bool
        if this.pages.get(1) == null
            return true
        return false

public class Page

    int number
    int maxSize
    Book book
    LinkedList<Passenger> items

    construct(Book whichBook)
        this.items = new LinkedList<Passenger>
        this.number = 0
        this.maxSize = whichBook.maxItemsPerPage
        this.book = whichBook
        whichBook.addPage(this)

    ondestroy
        destroy this.items

    /** if this current Page has reached its limit, a new page with a page number + 1 will be created, added to the same book, and returned.*/
    function addItem(Passenger passenger) returns thistype
        if this.items.size() < this.maxSize
            this.items.push(passenger)
            passenger.page = this
        else
            let newPage = new Page(this.book)
            newPage.items.push(passenger)
            passenger.page = newPage
            return newPage
        return this

    static function getNumFromItem(Passenger passenger) returns int
        return passenger.page.number

    /** removes a frame from a Page and returns the number of that Page or the one before it if the Page becomes empty from that action. */
    function removeItem(Passenger passenger) returns int
        this.items.remove(passenger)
        passenger.page = null
        if this.items.isEmpty()
            let num = this.number - 1
            this.book.removePage(this)
            destroy this
            return num
        else
            for pgNum = this.number to this.book.numberOfPages
                let currentPage = this.book.pages.get(pgNum)
                let nextPage = this.book.pages.get(pgNum + 1)
                if nextPage != null
                    while currentPage.items.size() < currentPage.maxSize and not nextPage.items.isEmpty()
                        let pass = nextPage.items.dequeue()
                        currentPage.items.push(pass)
                        pass.page = currentPage
                    if nextPage.items.isEmpty()
                        nextPage.book.removePage(nextPage)
                        destroy nextPage
            return this.number